{"version":3,"file":"static/js/572.a4fea76f.chunk.js","mappings":"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","sources":["webpack://my-app-samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileStatus/ProfileStatus.tsx","assets/img/camera.svg","components/Profile/ProfileInfo/DownLoadAvatar/DownLoadAvatar.tsx","webpack://my-app-samurai-way/./src/components/common/ImageLoader/ImageLoader.module.css?0674","components/common/ImageLoader/ImageLoader.tsx","webpack://my-app-samurai-way/./src/components/Profile/ProfileInfo/ProfileData/ContactDetails/ContactDetails.module.css?563c","components/Profile/ProfileInfo/ProfileData/ContactDetails/ContactDetails.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app-samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app-samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://my-app-samurai-way/./src/components/common/TextInputForm/TextInputForm.module.css?f515","components/common/TextInputForm/TextInputForm.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__KjZ0Q\",\"downloadIcon\":\"ProfileInfo_downloadIcon__ycHML\",\"avaWithIcon\":\"ProfileInfo_avaWithIcon__WoaX1\",\"loadingIcon\":\"ProfileInfo_loadingIcon__SPehk\",\"largeAvatar\":\"ProfileInfo_largeAvatar__KTgDS\",\"camIcon\":\"ProfileInfo_camIcon__TNCC4\",\"downloadInput\":\"ProfileInfo_downloadInput__4+N8U\",\"loader\":\"ProfileInfo_loader__-V75X\",\"paramTitle\":\"ProfileInfo_paramTitle__ga0iX\"};","import React, { ChangeEvent } from \"react\";\n\ntype ProfileStatusType = {\n  status: string;\n  updateStatus: (status: string) => void;\n  isToUpdate: boolean;\n};\n\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\n  state = {\n    editMode: false,\n    status: this.props.status,\n  };\n\n  activateEditMode = () => {\n    if (this.props.isToUpdate) {\n      this.setState({ editMode: true });\n    }\n  };\n  deactivateEditMode = () => {\n    this.setState({ editMode: false });\n    this.props.updateStatus(this.state.status);\n  };\n  onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      status: e.currentTarget.value,\n    });\n  };\n\n  render() {\n    let { status } = this.props;\n    return (\n      <div>\n        {!this.state.editMode ? (\n          <div>\n            <span onDoubleClick={this.activateEditMode}>\n              <b>Status: </b>\n              {status}\n            </span>\n          </div>\n        ) : (\n          <div>\n            <b>Status: </b>\n            <input\n              onChange={this.onStatusChange}\n              value={this.state.status}\n              onBlur={this.deactivateEditMode}\n              autoFocus={true}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgCamera(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    height: \"800px\",\n    width: \"800px\",\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 487 487\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M308.1,277.95c0,35.7-28.9,64.6-64.6,64.6s-64.6-28.9-64.6-64.6s28.9-64.6,64.6-64.6S308.1,242.25,308.1,277.95z  M440.3,116.05c25.8,0,46.7,20.9,46.7,46.7v122.4v103.8c0,27.5-22.3,49.8-49.8,49.8H49.8c-27.5,0-49.8-22.3-49.8-49.8v-103.9 v-122.3l0,0c0-25.8,20.9-46.7,46.7-46.7h93.4l4.4-18.6c6.7-28.8,32.4-49.2,62-49.2h74.1c29.6,0,55.3,20.4,62,49.2l4.3,18.6H440.3z  M97.4,183.45c0-12.9-10.5-23.4-23.4-23.4c-13,0-23.5,10.5-23.5,23.4s10.5,23.4,23.4,23.4C86.9,206.95,97.4,196.45,97.4,183.45z  M358.7,277.95c0-63.6-51.6-115.2-115.2-115.2s-115.2,51.6-115.2,115.2s51.6,115.2,115.2,115.2S358.7,341.55,358.7,277.95z\"\n  })))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCamera);\nexport default __webpack_public_path__ + \"static/media/camera.8741727dde7226e61f85a228dbc2b5a3.svg\";\nexport { ForwardRef as ReactComponent };","import React, { ChangeEvent, useRef } from \"react\";\nimport downloadIcon from \"../../../../assets/img/camera.svg\";\nimport mainS from \"../ProfileInfo.module.css\";\nimport { useAppDispatch } from \"app/hooks\";\nimport { updateAvatarTC } from \"redux/reducers/profile-reducer\";\n\ntype DownLoadAvatarPropsType = {\n  disabled: boolean;\n};\n\nexport const DownLoadAvatar = ({ disabled }: DownLoadAvatarPropsType) => {\n  const dispatch = useAppDispatch();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const selectFileHandler = () => {\n    inputRef && inputRef.current?.click();\n  };\n  const handleUpload = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      const file = e.target.files[0];\n      if (file.size < 4000000) {\n        postAvatar(file);\n      } else {\n        alert(\"Файл слишком большого размера\");\n      }\n    }\n  };\n\n  const postAvatar = (file: File) => {\n    const formData = new FormData();\n    formData.append(\"myFile\", file);\n    dispatch(updateAvatarTC(formData));\n  };\n\n  return (\n    <div className={mainS.loadingIcon}>\n      <label>\n        <button className={mainS.downloadIcon} onClick={selectFileHandler} disabled={disabled}>\n          <img src={downloadIcon} alt=\"download icon\" className={mainS.camIcon} />\n        </button>\n        <input type=\"file\" ref={inputRef} className={mainS.downloadInput} onChange={handleUpload} accept=\"image/*\" />\n      </label>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"imageLoader\":\"ImageLoader_imageLoader__Sk1QU\",\"rotating\":\"ImageLoader_rotating__WmvoZ\"};","import React from \"react\";\nimport s from \"./ImageLoader.module.css\";\n\nexport const ImageLoader = () => {\n  return <div className={s.imageLoader}></div>;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactDetails_contact__ZctWz\"};","import React from \"react\";\nimport s from \"./ContactDetails.module.css\";\n\ntype ContactType = {\n  github: string | null;\n  vk: string | null;\n  facebook: string | null;\n  instagram: string | null;\n  twitter: string | null;\n  website: string | null;\n  youtube: string | null;\n  mainLink: string | null;\n};\n\ntype ContactDetailsType = {\n  contacts: ContactType;\n};\nexport const ContactDetails = ({ contacts }: ContactDetailsType) => {\n  const contactsList = Object.entries(contacts).map((c) => {\n    return (\n      <div className={s.contact} key={c[0]}>\n        <b>{c[0]}:</b>\n        {c[1]}\n      </div>\n    );\n  });\n  return <div>{contactsList}</div>;\n};\n","import React from \"react\";\nimport s from \"components/Profile/ProfileInfo/ProfileInfo.module.css\";\nimport { UserProfileType } from \"api/profile-api\";\nimport { ContactDetails } from \"components/Profile/ProfileInfo/ProfileData/ContactDetails/ContactDetails\";\n\ntype ProfileDataProps = {\n  profile: UserProfileType;\n  isToUpdate: boolean;\n  toggleEditMode: (mode: boolean) => void;\n};\n\nexport const ProfileData = ({ profile, isToUpdate, toggleEditMode }: ProfileDataProps) => {\n  const switchEditMode = () => {\n    toggleEditMode(true);\n  };\n  return (\n    <>\n      {isToUpdate && <button onClick={switchEditMode}>edit profile</button>}\n      <div>\n        <span className={s.paramTitle}>Full name: </span>\n        {profile.fullName || \"---\"}\n      </div>\n      <div>\n        <span className={s.paramTitle}>About me: </span>\n        {profile.aboutMe || \"---\"}\n      </div>\n      <div>\n        <span className={s.paramTitle}>Looking for a job: </span> {profile.lookingForAJob ? \"yes\" : \"no\"}\n      </div>\n      {profile.lookingForAJob && (\n        <div>\n          <span className={s.paramTitle}>My professional skills: </span> {profile.lookingForAJobDescription}\n        </div>\n      )}\n      <div>\n        <span className={s.paramTitle}>Contact details:</span>\n        <ContactDetails contacts={profile.contacts} />\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { ProfileDataType, UserProfileType } from \"api/profile-api\";\nimport { useFormik } from \"formik\";\nimport { useAppDispatch } from \"app/hooks\";\nimport { setUserProfileTC, updateProfileTC } from \"redux/reducers/profile-reducer\";\n\ntype ProfileDataProps = {\n  profile: UserProfileType;\n  toggleEditMode: (mode: boolean) => void;\n};\nexport const ProfileDataForm = ({ profile, toggleEditMode }: ProfileDataProps) => {\n  const dispatch = useAppDispatch();\n  const formik = useFormik({\n    initialValues: {\n      userId: profile.userId,\n      aboutMe: profile.aboutMe,\n      fullName: profile.fullName,\n      lookingForAJob: profile.lookingForAJob,\n      lookingForAJobDescription: profile.lookingForAJobDescription,\n      contacts: {\n        github: profile.contacts.github || \"\",\n        vk: profile.contacts.vk || \"\",\n        facebook: profile.contacts.facebook || \"\",\n        instagram: profile.contacts.instagram || \"\",\n        twitter: profile.contacts.twitter || \"\",\n        website: profile.contacts.website || \"\",\n        youtube: profile.contacts.youtube || \"\",\n        mainLink: profile.contacts.mainLink || \"\",\n      },\n    },\n    onSubmit: (values: ProfileDataType) => {\n      dispatch(updateProfileTC(values)).then(() => {\n        dispatch(setUserProfileTC(values.userId));\n      });\n      toggleEditMode(false);\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <div>\n        <label htmlFor=\"fullName\">Full name: </label>\n        <input id=\"fullName\" name=\"fullName\" onChange={formik.handleChange} value={formik.values.fullName} />\n      </div>\n      <div>\n        <label htmlFor=\"aboutMe\">About me: </label>\n        <input id=\"aboutMe\" name=\"aboutMe\" onChange={formik.handleChange} value={formik.values.aboutMe} />\n      </div>\n\n      <div>\n        <label htmlFor=\"fullName\">Looking for a job: </label>\n        <input\n          id=\"lookingForAJob\"\n          name=\"lookingForAJob\"\n          type=\"checkbox\"\n          onChange={formik.handleChange}\n          checked={formik.values.lookingForAJob}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"fullName\">My professional skills: </label>\n        <input\n          id=\"lookingForAJobDescription\"\n          name=\"lookingForAJobDescription\"\n          onChange={formik.handleChange}\n          value={formik.values.lookingForAJobDescription}\n        />\n      </div>\n      <div>Contact details:</div>\n      {Object.entries(formik.values.contacts).map((c) => {\n        const contactName = \"contacts.\" + c[0];\n        return (\n          <div key={c[0]}>\n            <label htmlFor={contactName}>{`${c[0]}: `}</label>\n            <input type=\"text\" id={contactName} {...formik.getFieldProps(contactName)} />\n          </div>\n        );\n      })}\n      <div>\n        <button type=\"submit\">Submit</button>\n      </div>\n    </form>\n  );\n};\n","import React, { FC, useState } from \"react\";\nimport s from \"./ProfileInfo.module.css\";\nimport { UserProfileType } from \"api/profile-api\";\nimport { Preloader } from \"../../common/Preloader/Preloader\";\nimport { ProfileStatus } from \"../ProfileStatus/ProfileStatus\";\nimport avatarPlaceholder from \"../../../assets/img/avatar-placeholder.png\";\nimport { DownLoadAvatar } from \"components/Profile/ProfileInfo/DownLoadAvatar/DownLoadAvatar\";\nimport { useAppSelector } from \"app/hooks\";\nimport { getIsLoadingProfile } from \"utils/utils\";\nimport { ImageLoader } from \"components/common/ImageLoader/ImageLoader\";\nimport { ProfileData } from \"components/Profile/ProfileInfo/ProfileData/ProfileData\";\nimport { ProfileDataForm } from \"components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm\";\n\ntype ProfileInfoPropsType = {\n  profile: UserProfileType | null;\n  profileStatus: string;\n  updateStatus: (status: string) => void;\n  isToUpdate: boolean;\n};\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({ profile, profileStatus, updateStatus, isToUpdate }) => {\n  const [editMode, setEditMode] = useState(false);\n  const isLoading = useAppSelector(getIsLoadingProfile);\n  const [ava, setAva] = useState(avatarPlaceholder);\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div>\n      <div className={s.descriptionBlock}>\n        <div className={s.avaWithIcon}>\n          {isLoading ? (\n            <ImageLoader />\n          ) : (\n            <img src={profile?.photos.large || ava} alt=\"avatar\" className={s.largeAvatar} />\n          )}\n          {isToUpdate && <DownLoadAvatar disabled={isLoading} />}\n        </div>\n        <ProfileStatus status={profileStatus} updateStatus={updateStatus} isToUpdate={isToUpdate} />\n        {editMode ? (\n          <ProfileDataForm profile={profile} toggleEditMode={setEditMode} />\n        ) : (\n          <ProfileData profile={profile} isToUpdate={isToUpdate} toggleEditMode={setEditMode} />\n        )}\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__8N2xj\",\"posts\":\"MyPosts_posts__VDbQe\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__3H2YQ\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\n\ntype PostPropsType = {\n  message: string;\n  likeCount: number;\n  id: number;\n};\nexport const Post: React.FC<PostPropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src=\"https://img1.goodfon.ru/wallpaper/nbig/f/20/avatar-avatar-neytiri.jpg\" alt=\"avatar\" />\n      {props.message}\n      <div>\n        <span>likes: {props.likeCount}</span>\n      </div>\n      <div>\n        <span>like</span>\n      </div>\n    </div>\n  );\n};\n","import React, { FC, memo } from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport { Post } from \"./Post/Post\";\nimport { PostsType } from \"redux/reducers/profile-reducer\";\nimport { TextInputForm } from \"components/common/TextInputForm/TextInputForm\";\n\ntype MyPostsPropsTypes = {\n  posts: PostsType[];\n  newPostText: string;\n  addPost: (newPostText: string) => void;\n};\n\nexport const MyPosts: FC<MyPostsPropsTypes> = memo(({ posts, newPostText, addPost }) => {\n  const postsElements = posts.map((p) => <Post message={p.postText} likeCount={p.likesCount} id={p.id} key={p.id} />);\n\n  const onAddPost = (newPostText: string) => {\n    addPost(newPostText);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <TextInputForm onAddPost={onAddPost} initialPostText={newPostText} />\n      <div>New post</div>\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { MyPosts } from \"./MyPosts\";\nimport { addPostAC } from \"redux/reducers/profile-reducer\";\nimport { useDispatch } from \"react-redux\";\nimport { useAppSelector } from \"app/hooks\";\nimport { getNewPostText, getPosts } from \"utils/utils\";\n\nexport const MyPostsContainer = () => {\n  const dispatch = useDispatch();\n  const posts = useAppSelector(getPosts);\n  const newPostText = useAppSelector(getNewPostText);\n\n  const addPost = (newPostText: string) => {\n    dispatch(addPostAC(newPostText));\n  };\n\n  return <MyPosts addPost={addPost} posts={posts} newPostText={newPostText} />;\n};\n","import React, { FC } from \"react\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport { MyPostsContainer } from \"./MyPosts/MyPostsContainer\";\nimport { UserProfileType } from \"api/profile-api\";\n\ntype ProfilePropsType = {\n  profile: UserProfileType | null;\n  profileStatus: string;\n  updateStatus: (status: string) => void;\n  isToUpdate: boolean;\n};\n\nexport const Profile: FC<ProfilePropsType> = (props) => {\n  return (\n    <div className={\"\"}>\n      <ProfileInfo\n        profile={props.profile}\n        profileStatus={props.profileStatus}\n        updateStatus={props.updateStatus}\n        isToUpdate={props.isToUpdate}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Profile } from \"./Profile\";\nimport { UserProfileType } from \"api/profile-api\";\nimport { setUserProfileTC, updateStatusTC } from \"redux/reducers/profile-reducer\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { getAuth, getProfile, getProfileStatus } from \"utils/utils\";\n\ntype ProfileAPIComponentType = {\n  profile: UserProfileType | null;\n  setUserProfile: (userId: number) => void;\n  router: {\n    location: { pathname: string; search: string; hash: string; state: null | string; key: string };\n    navigate: any;\n    params: { userId: string };\n  };\n  isAuth: boolean;\n  profileStatus: string;\n  updateStatus: (status: string) => void;\n  isToUpdate: boolean;\n};\n\nfunction withRouter(Component: any) {\n  function ComponentWithRouterProp(props: any) {\n    let location = useLocation();\n    let navigate = useNavigate();\n    let params = useParams();\n    return <Component {...props} router={{ location, navigate, params }} />;\n  }\n  return ComponentWithRouterProp;\n}\nexport class ProfileAPIComponent extends React.Component<ProfileAPIComponentType> {\n  componentDidMount() {\n    const userId = Number(this.props.router.params.userId) || 30104;\n    this.props.setUserProfile(userId);\n  }\n\n  render() {\n    return (\n      <Profile\n        profile={this.props.profile}\n        profileStatus={this.props.profileStatus}\n        updateStatus={this.props.updateStatus}\n        isToUpdate={this.props.isToUpdate}\n      />\n    );\n  }\n}\n\nexport const AuthRedirectComponent = (props: any) => {\n  return <ProfileAPIComponent {...props} />;\n};\n\nconst WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n\nexport const ProfileContainer = () => {\n  const dispatch = useAppDispatch();\n  const profile = useAppSelector(getProfile);\n  const isAuth = useAppSelector(getAuth);\n  const profileStatus = useAppSelector(getProfileStatus);\n  const authId = useAppSelector((state) => state.auth.id);\n  const isToUpdate = authId === profile?.userId;\n\n  const setUserProfile = (userId: number) => {\n    dispatch(setUserProfileTC(userId));\n  };\n  const updateStatus = (status: string) => {\n    dispatch(updateStatusTC(status));\n  };\n\n  return (\n    <WithUrlDataContainerComponent\n      profile={profile}\n      setUserProfile={setUserProfile}\n      isAuth={isAuth}\n      profileStatus={profileStatus}\n      updateStatus={updateStatus}\n      isToUpdate={isToUpdate}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"inputForm\":\"TextInputForm_inputForm__XiL7r\"};","import React, { FC } from \"react\";\nimport { useFormik } from \"formik\";\nimport s from \"./TextInputForm.module.css\";\nimport { validatePost } from \"utils/validators/validators\";\n\ntype NewPostInputFormType = {\n  initialPostText: string;\n  onAddPost: (newPostText: string) => void;\n};\n\nexport type ValuesType = {\n  newText: string;\n};\n\nexport const TextInputForm: FC<NewPostInputFormType> = ({ onAddPost, initialPostText }) => {\n  const formik = useFormik({\n    initialValues: {\n      newText: initialPostText,\n    },\n    validate: (values) => validatePost(values),\n    onSubmit: (values) => {\n      onAddPost(values.newText);\n      formik.handleReset(values.newText);\n    },\n  });\n  const addPostStatus = !!formik.errors.newText;\n  return (\n    <form onSubmit={formik.handleSubmit} className={s.inputForm}>\n      <textarea id=\"newText\" name=\"newText\" onChange={formik.handleChange} value={formik.values.newText} />\n      <button type=\"submit\" disabled={addPostStatus}>\n        add post\n      </button>\n    </form>\n  );\n};\n","import { ValuesType } from \"components/common/TextInputForm/TextInputForm\";\n\ntype ErrorType = {\n  newText?: string;\n};\n\nexport const validatePost = (values: ValuesType) => {\n  const errors: ErrorType = {};\n\n  if (values.newText.length < 1) {\n    errors.newText = \"min message length is 5 bytes\";\n  }\n\n  return errors;\n};\n"],"names":["ProfileStatus","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","editMode","status","props","activateEditMode","isToUpdate","setState","deactivateEditMode","updateStatus","onStatusChange","e","currentTarget","value","_createClass","key","this","_jsx","children","_jsxs","onChange","onBlur","autoFocus","onDoubleClick","React","DownLoadAvatar","_ref","disabled","dispatch","useAppDispatch","inputRef","useRef","postAvatar","file","formData","FormData","append","updateAvatarTC","className","mainS","onClick","_inputRef$current","current","click","src","downloadIcon","alt","type","ref","target","files","size","alert","accept","ImageLoader","s","ContactDetails","contacts","contactsList","Object","entries","map","c","ProfileData","profile","toggleEditMode","_Fragment","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileDataForm","formik","useFormik","initialValues","userId","github","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","values","updateProfileTC","then","setUserProfileTC","handleSubmit","htmlFor","id","name","handleChange","checked","contactName","_objectSpread","getFieldProps","ProfileInfo","profileStatus","_useState","useState","_useState2","_slicedToArray","setEditMode","isLoading","useAppSelector","getIsLoadingProfile","_useState3","avatarPlaceholder","_useState4","ava","photos","large","Preloader","Post","message","likeCount","MyPosts","memo","posts","newPostText","addPost","postsElements","p","postText","likesCount","TextInputForm","onAddPost","initialPostText","MyPostsContainer","useDispatch","getPosts","getNewPostText","addPostAC","Profile","Component","ProfileAPIComponent","Number","router","params","setUserProfile","AuthRedirectComponent","WithUrlDataContainerComponent","location","useLocation","navigate","useNavigate","useParams","ProfileContainer","getProfile","isAuth","getAuth","getProfileStatus","auth","updateStatusTC","newText","validate","errors","validatePost","handleReset","addPostStatus"],"sourceRoot":""}